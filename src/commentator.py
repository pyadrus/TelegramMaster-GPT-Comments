# -*- coding: utf-8 -*-
import asyncio
import datetime

import flet as ft
from loguru import logger
from telethon.errors import (UserBannedInChannelError, PeerIdInvalidError, MsgIdInvalidError, SlowModeWaitError,
                             ChatWriteForbiddenError, ChatGuestSendForbiddenError, FloodWaitError, ChannelPrivateError,
                             AuthKeyUnregisteredError)
from telethon.tl.types import PeerChannel

from src.ai import get_groq_response
from src.config_handler import time_config
from src.core.buttons import create_buttons
from src.core.views import program_title, view_with_elements, message_output_program_window
from src.db_handler import reading_from_the_channel_list_database, check_message_exists, record_bottom_messages_database
from src.subscribe import SUBSCRIBE
from src.telegram_client import connect_telegram_account




class TelegramCommentator:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö.
    """

    async def handle_submitting_comments(self, page: ft.Page):
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        try:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            page.views.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π View

            lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            lv.controls.append(ft.Text(
                "üîó –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.\n\n"
                "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: `data/database/app.db`\n",
            ))

            page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

            async def action_1(_):
                lv.controls.append(ft.Text("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
                page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                await self.write_comments_in_telegram(await connect_telegram_account(), page, lv)

            await view_with_elements(page=page, title=await program_title(title="–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"),
                                     buttons=[
                                         await create_buttons(text="–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", on_click=action_1),
                                         await create_buttons(text="–ù–∞–∑–∞–¥", on_click=lambda _: page.go("/"))
                                     ],
                                     route_page="submitting_comments", lv=lv)
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        except Exception as e:
            logger.exception(e)

    async def write_comments_in_telegram(self, client, page: ft.Page, lv: ft.ListView) -> None:
        """
        –ü–∏—à–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö.

        :param client: TelegramClient –æ–±—ä–µ–∫—Ç.
        :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        :param lv: –ù–æ–º–µ—Ä —É—Ä–æ–≤–Ω—è.
        :return: None.
        """
        channels = await reading_from_the_channel_list_database()
        last_message_ids = {name: 0 for name in channels}
        for name in channels:
            logger.info(name[0])
            await SUBSCRIBE(page).subscribe_to_channel(client, name[0], lv)  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            try:
                messages = await client.get_messages(await client.get_entity(name[0]), limit=1)
                for message in messages:

                    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ ID –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    message_id = message.id
                    message_peer_id = message.peer_id
                    message_text = message.text
                    await message_output_program_window(lv=lv, page=page, message_program=f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id} ID: {message.peer_id} –î–∞—Ç–∞: {message.date}")
                    if messages:
                        post = messages[0]
                        if post.id != last_message_ids.get(name[0], None):
                            last_message_ids[name[0]] = post.id

                            try:
                                if isinstance(message_peer_id, PeerChannel):
                                    channel_id = message_peer_id.channel_id
                                    data = await get_groq_response(message_text)
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
                                    if not await check_message_exists(message_id, channel_id):
                                        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ –≤ –ë–î

                                        # –ó–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                        # data = await reading_json_file()
                                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ò–ò

                                        await client.send_message(entity=name[0], message=f'{data}',
                                                                  comment_to=post.id)
                                        await message_output_program_window(lv=lv, page=page,
                                                                            message_program=f"–ù–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data}")
                                        await message_output_program_window(lv=lv, page=page,
                                                                            message_program=f"–°–ø–∏–º {time_config} —Å–µ–∫—É–Ω–¥")
                                        await asyncio.sleep(int(time_config))
                                    else:
                                        await message_output_program_window(lv=lv, page=page,
                                                                            message_program=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é {message_id} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                                        await message_output_program_window(lv=lv, page=page,
                                                                            message_program=f"–°–ø–∏–º {time_config} —Å–µ–∫—É–Ω–¥")
                                        await asyncio.sleep(int(time_config))

                                if isinstance(message_peer_id, PeerChannel):
                                    channel_id = message_peer_id.channel_id
                                    logger.info(f"{message_id}, {channel_id}")

                                    await record_bottom_messages_database(message_id, channel_id)

                            except ChatWriteForbiddenError:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤: {name[0]}")
                            except MsgIdInvalidError:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å—Ç –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
                            except UserBannedInChannelError:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã")
                            except SlowModeWaitError as e:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ {str(datetime.timedelta(seconds=e.seconds))}")
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–°–ø–∏–º {str(datetime.timedelta(seconds=e.seconds))}")
                                await asyncio.sleep(e.seconds)
                            except FloodWaitError as e:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"Flood! wait for {str(datetime.timedelta(seconds=e.seconds))}")
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–°–ø–∏–º {str(datetime.timedelta(seconds=e.seconds))}")
                                await asyncio.sleep(int(time_config))
                            except ChatGuestSendForbiddenError:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã")
                            except ChannelPrivateError:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–ö–∞–Ω–∞–ª {name[0]} –∑–∞–∫—Ä—ã—Ç")
                            except PeerIdInvalidError:
                                await message_output_program_window(lv=lv, page=page,
                                                                    message_program=f"–ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞: {name[0]}")
            except FloodWaitError as e:  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ
                await message_output_program_window(lv=lv, page=page,
                                                    message_program=f"Flood! wait for {str(datetime.timedelta(seconds=e.seconds))}")
                await message_output_program_window(lv=lv, page=page,
                                                    message_program=f"–°–ø–∏–º {str(datetime.timedelta(seconds=e.seconds))}")
                await asyncio.sleep(int(time_config))
            except AuthKeyUnregisteredError:  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ—á–µ–Ω
                await message_output_program_window(lv=lv, page=page,
                                                    message_program=f"–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                break

            except ChannelPrivateError:
                await message_output_program_window(lv=lv, page=page, message_program=f"–ö–∞–Ω–∞–ª {name[0]} –∑–∞–∫—Ä—ã—Ç")
