# -*- coding: utf-8 -*-
import flet as ft
from loguru import logger

from src.core.buttons import create_buttons
from src.core.views import program_title, view_with_elements
from src.core.views import view_with_elements_input_field
from src.db_handler import read_channel_list_from_database
from src.db_handler import save_channels_to_db
from src.subscribe import SUBSCRIBE
from src.telegram_client import connect_telegram_account


async def handle_settings(page: ft.Page):
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    page.views.clear()
    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
    page.controls.append(lv)

    lv.controls.append(
        ft.Text(
            "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (SOCKS5). –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å IP-–∞–¥—Ä–µ—Å, –ø–æ—Ä—Ç, –∞ —Ç–∞–∫–∂–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.\n\n"
            "‚è≥ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª—ã. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
            "üÜî –ó–∞–ø–∏—Å—å ID –∏ Hash ‚Äî –≤–≤–æ–¥ API ID –∏ API Hash –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram. –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ https://my.telegram.org/apps.\n\n"
            "‚úâÔ∏è –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö. –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        )
    )
    page.update()

    async def connection_proxy(_):
        """üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        page.go("/settings_proxy")

    async def record_time(_):
        """‚è≥ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏"""
        page.go("/record_time")

    async def record_id_hash(_):
        """üÜî –ó–∞–ø–∏—Å—å ID –∏ Hash"""
        page.go("/record_id_hash")

    async def recording_message(_):
        """‚úâÔ∏è –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        page.go("/recording_message")

    await view_with_elements(page=page, title=await program_title(title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                             buttons=[
                                 await create_buttons(text="üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏", on_click=connection_proxy),
                                 await create_buttons(text="‚è≥ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏", on_click=record_time),
                                 await create_buttons(text="üÜî –ó–∞–ø–∏—Å—å ID –∏ Hash", on_click=record_id_hash),
                                 await create_buttons(text="‚úâÔ∏è –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è", on_click=recording_message),
                                 await create_buttons(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=lambda _: page.go("/"))
                             ],
                             route_page="change_name_description_photo",
                             lv=lv)
    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É


async def handle_channel_subscription(page: ft.Page):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã")
    page.views.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π View
    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
    page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    async def action_1(_):
        lv.controls.append(ft.Text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã / –≥—Ä—É–ø–ø—ã"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        client = await connect_telegram_account()

        channel_name = await read_channel_list_from_database()
        lv.controls.append(
            ft.Text(f"–ì—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {channel_name}"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        for channel in channel_name:
            lv.controls.append(ft.Text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: {channel[0]}"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await SUBSCRIBE().subscribe_to_channel(client, channel[0], page, lv)
        lv.controls.append(ft.Text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

    await view_with_elements(page=page, title=await program_title(title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã"),
                             buttons=[
                                 await create_buttons(text="–ü–æ–¥–ø–∏—Å–∫–∞", on_click=action_1),
                                 await create_buttons(text="–ù–∞–∑–∞–¥", on_click=lambda _: page.go("/"))
                             ],
                             route_page="channel_subscription", lv=lv)
    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É


async def handle_creating_list_of_channels(page: ft.Page):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É üìÇ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    page.views.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π View
    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
    page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    list_of_channels = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", multiline=True, max_lines=19)

    async def action_1(_):
        try:
            lv.controls.append(
                ft.Text("üìù –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º..."))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
            lv.controls.append(ft.Text(
                f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {list_of_channels.value}"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await save_channels_to_db(list_of_channels.value)
            lv.controls.append(
                ft.Text("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        except Exception as e:
            logger.error(e)
            lv.controls.append(ft.Text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—à–∏–±–∫—É –≤ ListView
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

    await view_with_elements_input_field(page=page,
                                         title=await program_title(title="üìÇ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"),
                                         buttons=[
                                             await create_buttons(text="‚úÖ –ì–æ—Ç–æ–≤–æ", on_click=action_1),
                                             await create_buttons(text="–ù–∞–∑–∞–¥", on_click=lambda _: page.go("/"))
                                         ],
                                         route_page="creating_list_of_channels",
                                         lv=lv,
                                         text_field=list_of_channels  # –°–æ–∑–¥–∞–µ–º TextField –ø–æ–ª–µ –≤–≤–æ–¥–∞
                                         )
    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É


async def handle_documentation(page: ft.Page):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.

    –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ñ–∞–π–ª `doc/doc.md`,
    –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é.

    :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    page.views.clear()
    page.fonts = {
        "Roboto Mono": "RobotoMono-VariableFont_wght.ttf",  # –®—Ä–∏—Ñ—Ç
    }
    page.scroll = "auto"

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Markdown-—Ñ–∞–π–ª–∞
    def load_markdown(file_path: str):
        try:
            with open(file_path, "r", encoding='utf-8') as f:
                markdown_content = f.read()
            return markdown_content
        except FileNotFoundError:
            return "–§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    markdown_content = load_markdown("doc/doc.md")
    # –°–æ–∑–¥–∞–µ–º Markdown-–≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    markdown_widget = ft.Markdown(
        markdown_content,
        selectable=True,
        code_style=ft.TextStyle(font_family="Roboto Mono"),
        on_tap_link=lambda e: page.launch_url(e.data),  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    )

    async def open_website(_):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–µ–±-–≤–µ—Ä—Å–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        page.launch_url("https://github.com/pyadrus/TelegramMaster_Commentator/blob/master/doc/doc.md")

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await view_with_elements(page=page,
                             title=await program_title(title="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),  # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                             buttons=[
                                 await create_buttons(text="üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", on_click=open_website),
                                 await create_buttons(text="–ù–∞–∑–∞–¥", on_click=lambda _: page.go("/"))
                             ],
                             route_page="documentation",
                             lv=ft.ListView(controls=[markdown_widget], expand=True, spacing=10, padding=20),
                             )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page.update()
