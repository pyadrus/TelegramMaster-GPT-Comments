# -*- coding: utf-8 -*-
import os

from loguru import logger
from telethon import TelegramClient
from telethon.sessions import StringSession

from src.config_handler import api_id, api_hash
from src.connect import reading_proxy_data_from_the_database


def find_files(directory_path: str, extension: str) -> list:
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–æ –±–µ–∑ —Ç–æ—á–∫–∏.

    :param directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :param extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—É–∫–∞–∑–∞–Ω–Ω–æ–µ –±–µ–∑ —Ç–æ—á–∫–∏)
    :return list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    entities = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    try:
        for file_name in os.listdir(directory_path):
            if file_name.endswith(
                f".{extension}"
            ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                file_path = os.path.join(
                    directory_path, file_name
                )  # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                entities.append(file_path)  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–ø–∏—Å–æ–∫

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {entities}")  # –í—ã–≤–æ–¥–∏–º –∏–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
    except FileNotFoundError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞! –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞


async def connect_client(session_path: str) -> TelegramClient | None:
    """
    –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —á–µ—Ä–µ–∑ session-—Ñ–∞–π–ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞.
    """
    try:
        async with TelegramClient(
            session=session_path,
            api_id=api_id,
            api_hash=api_hash,
            system_version="4.16.30-vxCUSTOM",
        ) as tmp_client:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ StringSession (—É–¥–æ–±–Ω–æ –¥–ª—è –ø—Ä–æ–∫—Å–∏)
            session_string = StringSession.save(tmp_client.session)

        # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏ –∏ StringSession
        client = TelegramClient(
            StringSession(session_string),
            api_id=api_id,
            api_hash=api_hash,
            system_version="4.16.30-vxCUSTOM",
            proxy=await reading_proxy_data_from_the_database(),
        )

        logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {session_path}")
        await client.connect()

        if await client.is_user_authorized():
            logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {session_path}")
            return client
        else:
            logger.warning(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {session_path} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –£–¥–∞–ª—è—é —Ñ–∞–π–ª...")
            await client.disconnect()
            try:
                os.remove(session_path)
            except OSError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {session_path}: {e}")
            return None

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {session_path}: {e}")
        return None


async def connect_telegram_account() -> TelegramClient:
    """
    –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —Ä–∞–±–æ—á–µ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É.
    :return: TelegramClient (–ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç).
    :raises: Exception, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.
    """
    session_files = find_files("data/accounts/", extension="session")
    if not session_files:
        raise Exception(
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/accounts/."
        )

    for session_file in session_files:
        client = await connect_client(session_file)
        if client:
            return client

    raise Exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.")
