# -*- coding: utf-8 -*-
import asyncio
import datetime
import time

import flet as ft
from loguru import logger
from telethon.errors import FloodWaitError, ChannelPrivateError, UsernameInvalidError
from telethon.tl.functions.channels import JoinChannelRequest

from src.config_handler import time_config
from src.core.buttons import create_buttons
from src.core.views import program_title, view_with_elements
from src.db_handler import (
    read_channel_list_from_database,
    delete_username_from_database,
)
from src.telegram_client import connect_telegram_account


async def handle_channel_subscription(page: ft.Page):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã")
    page.views.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π View
    lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    lv.controls.append(
        ft.Text(
            "üîó –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
        )
    )

    page.controls.append(
        lv
    )  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

    async def action_1(_):
        lv.controls.append(
            ft.Text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã / –≥—Ä—É–ø–ø—ã")
        )  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        client = await connect_telegram_account()

        channel_name = await read_channel_list_from_database()
        lv.controls.append(
            ft.Text(f"–ì—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {channel_name}")
        )  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        for channel in channel_name:
            lv.controls.append(
                ft.Text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞: {channel[0]}")
            )  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await SUBSCRIBE(page).subscribe_to_channel(client, channel[0], lv)
        lv.controls.append(
            ft.Text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        )  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

    await view_with_elements(
        page=page,
        title=await program_title(title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã"),
        buttons=[
            await create_buttons(text="–ü–æ–¥–ø–∏—Å–∫–∞", on_click=action_1),
            await create_buttons(text="–ù–∞–∑–∞–¥", on_click=lambda _: page.go("/")),
        ],
        route_page="channel_subscription",
        lv=lv,
    )
    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É


class SUBSCRIBE:
    """–ö–ª–∞—Å—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã Telegram"""

    def __init__(self, page: ft.Page):
        self.page = page

    async def subscribe_to_channel(self, client, channel_name, lv: ft.ListView) -> None:
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª.
        :param channel_name: –ò–º—è –∫–∞–Ω–∞–ª–∞ Telegram.
        :param client: TelegramClient –æ–±—ä–µ–∫—Ç.
        :param lv: ListView.
        :return: None.
        """
        if not channel_name or channel_name.isdigit():
            lv.controls.append(
                ft.Text(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π username –∫–∞–Ω–∞–ª–∞: {channel_name}", color=ft.Colors.RED
                )
            )
            self.page.update()
            return
        try:
            await client(JoinChannelRequest(channel_name))
            lv.controls.append(
                ft.Text(f"–£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {channel_name}", color=ft.Colors.RED)
            )
            self.page.update()
            await asyncio.sleep(int(time_config))
        except ChannelPrivateError:
            lv.controls.append(
                ft.Text(f"–ö–∞–Ω–∞–ª {channel_name} –∑–∞–∫—Ä—ã—Ç", color=ft.Colors.RED)
            )  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
            self.page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        except FloodWaitError as e:
            lv.controls.append(
                ft.Text(
                    f"Flood! wait for {str(datetime.timedelta(seconds=e.seconds))}",
                    color=ft.Colors.RED,
                )
            )  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
            self.page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            time.sleep(e.seconds)
        except UsernameInvalidError:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª. –ù–µ –≤–µ—Ä–Ω—ã–π username –∫–∞–Ω–∞–ª–∞: {channel_name}"
            )
            delete_username_from_database(channel_name)
        except ValueError:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª. –ù–µ –≤–µ—Ä–Ω—ã–π username –∫–∞–Ω–∞–ª–∞: {channel_name}"
            )
            delete_username_from_database(channel_name)
