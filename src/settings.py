# -*- coding: utf-8 -*-
import configparser
import io
import json  # TODO –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å json —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Ñ–∞–π–ª–µ.
import os
import sys

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger

from src.connect import show_notification, line_width_button, height_button, done_button, back_button
from src.db_handler import DatabaseHandler

config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)
config.read("user_data/config/config.ini")

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


class SettingPage:

    def __init__(self):
        self.db_handler = DatabaseHandler()

    async def creating_the_main_window_for_proxy_data_entry(self, page: ft.Page) -> None:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥—ã–Ω–Ω—ã—Ö proxy

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù

        lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        proxy_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä SOCKS5: ", multiline=True, max_lines=19)
        addr_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ ip –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä 194.67.248.9: ", multiline=True, max_lines=19)
        port_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 9795: ", multiline=True, max_lines=19)
        username_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ username, –Ω–∞–ø—Ä–∏–º–µ—Ä NnbjvX: ", multiline=True, max_lines=19)
        password_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä ySfCfk: ", multiline=True, max_lines=19)

        async def btn_click(e) -> None:
            rdns_types = "True"
            proxy = [proxy_type.value, addr_type.value, port_type.value, username_type.value, password_type.value,
                     rdns_types]
            await self.db_handler.save_proxy_data_to_db(proxy=proxy)

            await show_notification(page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")

            page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            page.update()

        self.add_view_with_fields_and_button(page, [proxy_type, addr_type, port_type, username_type, password_type],
                                             btn_click, lv)

    async def recording_text_for_sending_messages(self, page: ft.Page, label, unique_filename) -> None:
        """
        –ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º
        <–∏–º—è —Ñ–∞–π–ª–∞>.json –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param label: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        :param unique_filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.
        """
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù

        lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        text_to_send = ft.TextField(label=label, multiline=True, max_lines=19)

        async def btn_click(e) -> None:
            write_data_to_json_file(reactions=text_to_send.value,
                                    path_to_the_file=unique_filename)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª

            await show_notification(page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")

            page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            page.update()

        self.add_view_with_fields_and_button(page, [text_to_send], btn_click, lv)

    def output_the_input_field(self, page: ft.Page, label: str, table_name: str, column_name: str, route: str,
                               into_columns: str) -> None:
        """
        –û–∫–Ω–æ –≤–≤–æ–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ telegram

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param label: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        :param table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        :param column_name: –ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.
        :param route: –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.
        :param into_columns: –ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ.
        """
        text_to_send = ft.TextField(label=label, multiline=True, max_lines=19)
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù

        lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        async def btn_click(e) -> None:
            await self.db_handler.write_to_single_column_table(
                name_database=table_name,
                database_columns=column_name,
                into_columns=into_columns,
                recorded_data=text_to_send.value.split()
            )

            await show_notification(page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")

            page.go(route)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            page.update()

        self.add_view_with_fields_and_button(page, [text_to_send], btn_click, lv)

    async def record_setting(self, page: ft.Page, limit_type: str, label: str):
        """
        –ó–∞–ø–∏—Å—å –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param limit_type: –¢–∏–ø –ª–∏–º–∏—Ç–∞.
        :param label: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        """
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù

        lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        limits = ft.TextField(label=label, multiline=True, max_lines=19)

        async def btn_click(e) -> None:
            try:
                config.get(limit_type, limit_type)
                config.set(limit_type, limit_type, limits.value)
                writing_settings_to_a_file(config)

                await show_notification(page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")

            except configparser.NoSectionError as error:
                await show_notification(page, "‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω —Ñ–∞–π–ª user_data/config/config.ini")
                logger.error(f"–û—à–∏–±–∫–∞: {error}")

            page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            page.update()

        self.add_view_with_fields_and_button(page, [limits], btn_click, lv)

    async def recording_the_time_to_launch_an_invite_every_day(self, page: ft.Page) -> None:
        """
        –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ inviting –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù

        lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        hour_textfield = ft.TextField(label="–ß–∞—Å –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (0-23):", autofocus=True, value="")
        minutes_textfield = ft.TextField(label="–ú–∏–Ω—É—Ç—ã –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π (0-59):", value="")

        async def btn_click(e) -> None:
            try:
                hour = int(hour_textfield.value)
                minutes = int(minutes_textfield.value)

                if not 0 <= hour < 24:
                    logger.info('–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ 23!')
                    return
                if not 0 <= minutes < 60:
                    logger.info('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0 –¥–æ 59!')
                    return

                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ config —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –ø–æ—Ö–æ–∂–∏–º –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
                config.get("hour_minutes_every_day", "hour")
                config.set("hour_minutes_every_day", "hour", str(hour))
                config.get("hour_minutes_every_day", "minutes")
                config.set("hour_minutes_every_day", "minutes", str(minutes))
                writing_settings_to_a_file(config)

                await show_notification(page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")

                page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            except ValueError:
                logger.info('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç!')
            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

        self.add_view_with_fields_and_button(page, [hour_textfield, minutes_textfield], btn_click, lv)

    async def create_main_window(self, page: ft.Page, variable, time_range) -> None:
        """
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param variable: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ config.ini
        :param time_range: –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ
        :return: None
        """

        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù

        for time_range_message in time_range:
            lv.controls.append(
                ft.Text(f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ {time_range_message}"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        smaller_timex = ft.TextField(label="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–µ–Ω—å—à–µ–µ)", autofocus=True)
        larger_timex = ft.TextField(label="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±–æ–ª—å—à–µ–µ)")

        async def btn_click(e) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ"""

            try:
                smaller_times = int(smaller_timex.value)
                larger_times = int(larger_timex.value)

                if smaller_times < larger_times:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ
                    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏ –≤—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    config = recording_limits_file(str(smaller_times), str(larger_times), variable=variable)
                    writing_settings_to_a_file(config)

                    lv.controls.append(ft.Text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
                    await show_notification(page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
                    page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                else:
                    lv.controls.append(ft.Text("–û—à–∏–±–∫–∞: –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ!"))
            except ValueError:
                lv.controls.append(ft.Text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!"))

            page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

        self.add_view_with_fields_and_button(page, [smaller_timex, larger_timex], btn_click, lv)

    async def writing_api_id_api_hash(self, page: ft.Page):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ–º api, hash –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ https://my.telegram.org/auth

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        page.controls.append(lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù

        lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView

        api_id_data = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ api_id", multiline=True, max_lines=19)
        api_hash_data = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ api_hash", multiline=True, max_lines=19)

        def btn_click(e) -> None:
            config.get("telegram_settings", "id")
            config.set("telegram_settings", "id", api_id_data.value)
            config.get("telegram_settings", "hash")
            config.set("telegram_settings", "hash", api_hash_data.value)
            writing_settings_to_a_file(config)
            page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            page.update()

        self.add_view_with_fields_and_button(page, [api_id_data, api_hash_data], btn_click, lv)

    @staticmethod
    def add_view_with_fields_and_button(page: ft.Page, fields: list, btn_click, lv) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :param fields: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        :param btn_click: –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        :param lv: ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        :return: None
        """

        def back_button_clicked(e) -> None:
            """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            page.go("/settings")

        # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ" (button) –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –µ–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π button_clicked.
        button = ft.ElevatedButton(width=line_width_button, height=height_button, text=done_button, on_click=btn_click)
        button_back = ft.ElevatedButton(width=line_width_button, height=height_button, text=back_button,
                                        on_click=back_button_clicked)

        # –°–æ–∑–¥–∞–Ω–∏–µ View —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        page.views.append(
            ft.View(
                "/settings",
                controls=[
                    lv,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                    ft.Column(
                        controls=fields + [button, button_back]
                    )
                ]
            )
        )


def writing_settings_to_a_file(config) -> None:
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª user_data/config.ini"""
    with open("user_data/config/config.ini", "w") as setup:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏
        config.write(setup)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª


def recording_limits_file(time_1, time_2, variable: str) -> configparser.ConfigParser:
    """
    –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª TelegramMaster/user_data/config.ini

    :param time_1: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param time_2: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param variable: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ config.ini
    """
    try:
        config.get(f"{variable}", f"{variable}_1")
        config.set(f"{variable}", f"{variable}_1", time_1)
        config.get(f"{variable}", f"{variable}_2")
        config.set(f"{variable}", f"{variable}_2", time_2)
        return config
    except configparser.NoSectionError as error:
        logger.error(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {error}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TelegramMaster/user_data/config/config.ini")


def write_data_to_json_file(reactions, path_to_the_file):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    with open(path_to_the_file, 'w', encoding='utf-8') as file:
        json.dump(reactions, file, ensure_ascii=False, indent=4)


def get_unique_filename(base_filename) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    index = 1
    while True:
        new_filename = f"{base_filename}_{index}.json"
        if not os.path.isfile(new_filename):
            return new_filename
        index += 1
