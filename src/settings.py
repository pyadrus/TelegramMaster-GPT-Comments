# -*- coding: utf-8 -*-
import configparser
import io
import json
import os
import sys
from pathlib import Path

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
from loguru import logger

from src.config_handler import WINDOW_WIDTH, max_lines
from src.core.buttons import create_buttons
from src.core.notification import show_notification
from src.db_handler import DatabaseHandler

config = configparser.ConfigParser(empty_lines_in_values=False, allow_no_value=True)
config.read("data/config/config.ini")

sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


class SettingPage:

    def __init__(self, page: ft.Page):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        self.lv = ft.ListView(expand=10, spacing=1, padding=2, auto_scroll=True)
        self.page = page
        self.db_handler = DatabaseHandler()
        self.width_elements = int(WINDOW_WIDTH) - 10  # –®–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ–ª—è –≤–≤–æ–¥–∞, –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –∫–Ω–æ–ø–æ–∫)

    async def creating_the_main_window_for_proxy_data_entry(self) -> None:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥—ã–Ω–Ω—ã—Ö proxy
        """
        self.page.controls.append(self.lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        self.lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        proxy_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–∫—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä SOCKS5: ", multiline=True, max_lines=19)
        addr_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ ip –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä 194.67.248.9: ", multiline=True, max_lines=19)
        port_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 9795: ", multiline=True, max_lines=19)
        username_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ username, –Ω–∞–ø—Ä–∏–º–µ—Ä NnbjvX: ", multiline=True, max_lines=19)
        password_type = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –Ω–∞–ø—Ä–∏–º–µ—Ä ySfCfk: ", multiline=True, max_lines=19)

        async def btn_click(e) -> None:
            await self.db_handler.save_proxy_data_to_db(
                proxy=[proxy_type.value, addr_type.value, port_type.value, username_type.value, password_type.value,
                     "True"]
            )
            await show_notification(self.page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
            self.page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.page.update()
        await self.add_view_with_fields_and_button([proxy_type, addr_type, port_type, username_type, password_type],
                                                   btn_click, self.lv)

    async def recording_text_for_sending_messages(self, label, unique_filename) -> None:
        """
        –ó–∞–ø–∏—Å—å —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º
        <–∏–º—è —Ñ–∞–π–ª–∞>.json –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

        :param label: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        :param unique_filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö.
        """
        self.page.controls.append(self.lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        self.lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        text_to_send = ft.TextField(label=label, multiline=True, max_lines=19)

        async def btn_click(e) -> None:
            write_data_to_json_file(reactions=text_to_send.value,
                                    path_to_the_file=unique_filename)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            await show_notification(self.page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
            self.page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.page.update()

        await self.add_view_with_fields_and_button([text_to_send], btn_click, self.lv)

    async def record_setting(self, limit_type: str, label: str):
        """
        –ó–∞–ø–∏—Å—å –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ

        :param limit_type: –¢–∏–ø –ª–∏–º–∏—Ç–∞.
        :param label: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
        """
        self.page.controls.append(self.lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        self.lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        limits = ft.TextField(label=label, multiline=True, max_lines=19)

        async def btn_click(e) -> None:
            try:
                config.get(limit_type, limit_type)
                config.set(limit_type, limit_type, limits.value)
                writing_settings_to_a_file(config)
                await show_notification(self.page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
            except configparser.NoSectionError as error:
                await show_notification(self.page, "‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥–µ–Ω —Ñ–∞–π–ª data/config/config.ini")
                logger.error(f"–û—à–∏–±–∫–∞: {error}")
            self.page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.page.update()

        await self.add_view_with_fields_and_button([limits], btn_click, self.lv)

    async def create_main_window(self, variable, time_range) -> None:
        """
        :param variable: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ config.ini
        :param time_range: –ò–º—è —Ñ–∞–π–ª–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ
        :return: None
        """
        self.page.controls.append(self.lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        for time_range_message in time_range:
            self.lv.controls.append(
                ft.Text(f"–ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ {time_range_message}"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        smaller_timex = ft.TextField(label="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–º–µ–Ω—å—à–µ–µ)", autofocus=True)
        larger_timex = ft.TextField(label="–í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–±–æ–ª—å—à–µ–µ)")

        async def btn_click(e) -> None:
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ"""
            try:
                smaller_times = int(smaller_timex.value)
                larger_times = int(larger_timex.value)
                if smaller_times < larger_times:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ
                    # –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –∏ –≤—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    config = recording_limits_file(str(smaller_times), str(larger_times), variable=variable)
                    writing_settings_to_a_file(config)
                    self.lv.controls.append(ft.Text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
                    await show_notification(self.page, "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!")
                    self.page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                else:
                    self.lv.controls.append(ft.Text("–û—à–∏–±–∫–∞: –ø–µ—Ä–≤–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ!"))
            except ValueError:
                self.lv.controls.append(ft.Text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!"))

            self.page.update()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

        await self.add_view_with_fields_and_button([smaller_timex, larger_timex], btn_click, self.lv)

    async def writing_api_id_api_hash(self):
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ–º api, hash –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ https://my.telegram.org/auth
        """
        self.page.controls.append(self.lv)  # –¥–æ–±–∞–≤–ª—è–µ–º ListView –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        self.lv.controls.append(ft.Text(f"–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏"))  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView
        api_id_data = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ api_id", multiline=True, max_lines=19)
        api_hash_data = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ api_hash", multiline=True, max_lines=19)

        def btn_click(e) -> None:
            config.get("telegram_settings", "id")
            config.set("telegram_settings", "id", api_id_data.value)
            config.get("telegram_settings", "hash")
            config.set("telegram_settings", "hash", api_hash_data.value)
            writing_settings_to_a_file(config)
            self.page.go("/settings")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.page.update()

        await self.add_view_with_fields_and_button([api_id_data, api_hash_data], btn_click, self.lv)

    async def add_view_with_fields_and_button(self, fields: list, btn_click, lv) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π.

        :param fields: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        :param btn_click: –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        :param lv: ListView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ üìù
        :return: None
        """

        def back_button_clicked(e) -> None:
            """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            self.page.go("/settings")

        # –°–æ–∑–¥–∞–Ω–∏–µ View —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        self.page.views.append(
            ft.View(
                "/settings",
                controls=[
                    lv,  # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ üìù
                    ft.Column(
                        controls=fields + [
                            await create_buttons(text="‚úÖ –ì–æ—Ç–æ–≤–æ", on_click=btn_click),
                            await create_buttons(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=back_button_clicked),
                        ]
                    )
                ]
            )
        )

    async def choosing_an_ai_model(self):
        """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ AI"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ JSON
        models_file = Path("data/config/models.json")
        promt_file = Path("data/config/promt.json")

        with open(models_file, "r", encoding="utf-8") as f:
            models = json.load(f)["models"]
        result_text = ft.Text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å...")

        # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞
        def on_change(e):
            result_text.value = f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {e.control.value}"
            self.page.update()

        def back_button_clicked(e) -> None:
            """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
            self.page.go("/settings")

        def done_button_clicked(e) -> None:
            """–ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞"""
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            if promt_file.exists():
                with open(promt_file, "r", encoding="utf-8") as f:
                    data = json.load(f)
            else:
                data = {}

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if entering_token.value.strip():
                data["token"] = entering_token.value.strip()

            if dropdown.value:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å
                data["model"] = dropdown.value

            if entering_promt.value.strip():
                data["promt"] = entering_promt.value.strip()

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ/–Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            if not data.get("token") and not data.get("model") and not data.get("promt"):
                result_text.value = "‚ö†Ô∏è –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏!"
                self.page.update()
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            promt_file.parent.mkdir(parents=True, exist_ok=True)
            with open(promt_file, "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

            result_text.value = "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!"
            if dropdown.value:
                result_text.value += f"\nüéØ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–±–æ—Ä: {dropdown.value}"
            self.page.update()

        entering_token = ft.TextField(
            label="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω https://groq.com",
            width=self.width_elements, # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
            max_lines=int(max_lines)
        )

        entering_promt = ft.TextField(
            label="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç",
            width=self.width_elements, # –®–∏—Ä–∏–Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
            max_lines=int(max_lines)
        )

        dropdown = ft.Dropdown(
            width=self.width_elements, # –®–∏—Ä–∏–Ω–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            options=[ft.dropdown.Option(model) for model in models], # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ json —Ñ–∞–π–ª–∞
        )
        dropdown.on_change = on_change

        # —Å–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–π View –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        self.page.views.append(
            ft.View(
                "/choosing_an_ai_model",
                controls=[
                    ft.Column(
                        [
                            ft.Text("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å https://groq.com", size=18, weight=ft.FontWeight.BOLD),
                            entering_token,  # –í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞
                            ft.Text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º—Ç –¥–ª—è –ò–ò", size=18, weight=ft.FontWeight.BOLD),
                            entering_promt,  # –í–≤–æ–¥ –ø—Ä–æ–º—Ç–∞
                            ft.Text("–í—ã–±–æ—Ä –ò–ò –º–æ–¥–µ–ª–∏", size=18, weight=ft.FontWeight.BOLD),
                            dropdown,
                            result_text,
                            ft.ElevatedButton(
                                text= "‚úÖ –ì–æ—Ç–æ–≤–æ", # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
                                width=self.width_elements, # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏
                                on_click=done_button_clicked # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                            ),
                            ft.ElevatedButton(
                                text= "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
                                width=self.width_elements, # –®–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏
                                on_click=back_button_clicked # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                            ),
                        ],
                        alignment=ft.MainAxisAlignment.START,
                        spacing=10,
                    )]))
        self.page.update()


def writing_settings_to_a_file(config) -> None:
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª user_data/config.ini"""
    with open("data/config/config.ini", "w") as setup:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –∑–∞–ø–∏—Å–∏
        config.write(setup)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª


def recording_limits_file(time_1, time_2, variable: str):
    """
    –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª TelegramMaster/user_data/config.ini

    :param time_1: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param time_2: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :param variable: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ config.ini
    """
    try:
        config.get(f"{variable}", f"{variable}_1")
        config.set(f"{variable}", f"{variable}_1", time_1)
        config.get(f"{variable}", f"{variable}_2")
        config.set(f"{variable}", f"{variable}_2", time_2)
        return config
    except configparser.NoSectionError as error:
        logger.error(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {error}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TelegramMaster/data/config/config.ini")


def write_data_to_json_file(reactions, path_to_the_file):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"""
    with open(f"{path_to_the_file}.json", 'w', encoding='utf-8') as file:
        json.dump(reactions, file, ensure_ascii=False, indent=4)


def get_unique_filename(base_filename) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    index = 1
    while True:
        new_filename = f"{base_filename}_{index}.json"
        if not os.path.isfile(new_filename):
            return new_filename
        index += 1
