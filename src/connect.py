# -*- coding: utf-8 -*-
import asyncio
import os
import os.path
import random
import shutil
import sqlite3

import flet as ft  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É flet
import phonenumbers
import requests
from loguru import logger
from phonenumbers import carrier, geocoder
from telethon import TelegramClient
from telethon.errors import (AuthKeyDuplicatedError, PhoneNumberBannedError, UserDeactivatedBanError, TimedOutError,
                             AuthKeyNotFound, TypeNotFoundError, AuthKeyUnregisteredError, SessionPasswordNeededError,
                             ApiIdInvalidError, YouBlockedUserError)
from thefuzz import fuzz

from src.config_handler import api_id, api_hash, folder_accounts
from src.core.buttons import create_buttons
from src.core.notification import show_notification
from src.db_handler import DatabaseHandler
from src.logging_in import get_country_flag

# –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
back_button: str = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
done_button: str = "‚úÖ –ì–æ—Ç–æ–≤–æ"

height_button = 35
line_width_button = 850


def getting_phone_number_data_by_phone_number(phone_numbers):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    :param phone_numbers: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :return: None
    """

    # –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    number = phonenumbers.parse(f"+{phone_numbers}", None)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    country_name = geocoder.description_for_number(number, "ru")
    operator_name = carrier.name_for_number(number, "ru")

    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    logger.info(f"–ù–æ–º–µ—Ä: {phone_numbers}, –û–ø–µ—Ä–∞—Ç–æ—Ä: {operator_name}, –°—Ç—Ä–∞–Ω–∞: {country_name}")


async def reading_proxy_data_from_the_database(db_handler):
    """
    –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è proxy c –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "software_database.db", —Ç–∞–±–ª–∏—Ü–∞ "proxy" –≥–¥–µ:
    proxy_type - —Ç–∏–ø proxy (–Ω–∞–ø—Ä–∏–º–µ—Ä: SOCKS5), addr - –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 194.67.248.9), port - –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9795)
    username - –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: username), password - –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: password)

    :param db_handler - –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ DatabaseHandler
    """
    try:
        proxy_random_list = random.choice(await db_handler.open_and_read_data("proxy"))
        logger.info(f"{proxy_random_list}")
        proxy = {'proxy_type': (proxy_random_list[0]), 'addr': proxy_random_list[1], 'port': int(proxy_random_list[2]),
                 'username': proxy_random_list[3], 'password': proxy_random_list[4], 'rdns': proxy_random_list[5]}
        return proxy
    except IndexError:
        proxy = None
        return proxy
    except Exception as error:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")


async def checking_the_proxy_for_work() -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é Example.org. Example.org —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–º –∞–¥—Ä–µ—Å–∞ –¥–æ–º–µ–Ω–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ
    —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤. –ù–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –Ω–æ –æ–Ω
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.
    """
    try:
        for proxy_dic in await DatabaseHandler().open_and_read_data("proxy"):
            logger.info(proxy_dic)
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ proxy —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            await connecting_to_proxy_with_verification(proxy_type=proxy_dic[0],  # –¢–∏–ø proxy (–Ω–∞–ø—Ä–∏–º–µ—Ä: SOCKS5)
                                                        addr=proxy_dic[1],  # –ê–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 194.67.248.9)
                                                        port=proxy_dic[2],  # –ü–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9795)
                                                        username=proxy_dic[3],  # –õ–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: username)
                                                        password=proxy_dic[4],  # –ü–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: password)
                                                        rdns=proxy_dic[5],
                                                        db_handler=DatabaseHandler())
    except Exception as error:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")


async def connecting_to_proxy_with_verification(proxy_type, addr, port, username, password, rdns, db_handler) -> None:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ proxy —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≥–¥–µ: proxy_type - —Ç–∏–ø proxy (–Ω–∞–ø—Ä–∏–º–µ—Ä: SOCKS5),
    addr - –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 194.67.248.9), port - –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9795), username - –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: username),
    password - –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: password)

    :param proxy_type: —Ç–∏–ø proxy (–Ω–∞–ø—Ä–∏–º–µ—Ä: SOCKS5)
    :param addr: –∞–¥—Ä–µ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 194.67.248.9)
    :param port: –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9795)
    :param username: –ª–æ–≥–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: username)
    :param password: –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: password)
    :param rdns: rdns (–Ω–∞–ø—Ä–∏–º–µ—Ä: rdns)
    :param db_handler: –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ DatabaseHandler
    """
    # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ –ø—Ä–æ–∫—Å–∏
    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫—Å–∏
        proxy = {'http': f'{proxy_type}://{username}:{password}@{addr}:{port}'}
        emoji, country = get_country_flag(addr)
        logger.info(
            f"–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –ø—Ä–æ–∫—Å–∏: {proxy_type}://{username}:{password}@{addr}:{port}. –°—Ç—Ä–∞–Ω–∞ proxy {country} {emoji}")
        requests.get('http://example.org', proxies=proxy)
        logger.info(f'‚ö†Ô∏è Proxy: {proxy_type}://{username}:{password}@{addr}:{port} —Ä–∞–±–æ—á–∏–π!')
    # RequestException –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω—ã –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É.
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞, –æ—à–∏–±–æ—á–Ω–æ–≥–æ URL –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.
    except requests.exceptions.RequestException:
        logger.info('‚ùå Proxy –Ω–µ —Ä–∞–±–æ—á–∏–π!')
        await db_handler.deleting_an_invalid_proxy(proxy_type, addr, port, username, password, rdns)
    except Exception as error:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")


def find_filess(directory_path, extension) -> list:
    """
    –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ –±–µ–∑ —Ç–æ—á–∫–∏.

    :param directory_path: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    :param extension: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—É–∫–∞–∑–∞–Ω–Ω–æ–µ –±–µ–∑ —Ç–æ—á–∫–∏)
    :return list: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """
    entities = []  # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–º–µ–Ω–∞–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ user_data/accounts
    try:
        for x in os.listdir(directory_path):
            if x.endswith(f".{extension}"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                file = os.path.splitext(x)[0]  # –†–∞–∑–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                entities.append(file)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–ø–∏—Å–æ–∫

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {entities}")  # –í—ã–≤–æ–¥–∏–º –∏–º–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤

        return entities  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ json —Ñ–∞–π–ª–æ–≤
    except FileNotFoundError:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞! –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")


def working_with_accounts(account_folder, new_account_folder) -> None:
    """
    –†–∞–±–æ—Ç–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏

    :param account_folder: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    :param new_account_folder: –ü—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
    """
    try:  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
        os.replace(account_folder, new_account_folder)
    except FileNotFoundError:  # –ï—Å–ª–∏ –≤ –ø–∞–ø–∫–µ –Ω–µ—Ç –Ω—É–∂–Ω–æ–π –ø–∞–ø–∫–∏, —Ç–æ —Å–æ–∑–¥–∞–µ–º –µ–µ
        try:
            os.makedirs(new_account_folder)
            os.replace(account_folder, new_account_folder)
        except FileExistsError:  # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º –µ–≥–æ
            os.remove(account_folder)
    except PermissionError as error:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É")
    except Exception as error:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")


class TGConnect:

    def __init__(self):
        self.db_handler = DatabaseHandler()

    async def verify_account(self, page: ft.Page, folder_name, session_name) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã.

        :param session_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        :param folder_name: –ü–∞–ø–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}. –ò—Å–ø–æ–ª—å–∑—É–µ–º API ID: {api_id}, API Hash: {api_hash}")
            telegram_client = await self.get_telegram_client(page, session_name,
                                                             f"user_data/accounts/{folder_name}")
            try:
                await telegram_client.connect()  # –ü–æ–¥—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞
                if not await telegram_client.is_user_authorized():  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω
                    await telegram_client.disconnect()
                    await asyncio.sleep(5)
                    working_with_accounts(f"user_data/accounts/{folder_name}/{session_name}.session",
                                          f"user_data/accounts/banned/{session_name}.session")
                else:
                    logger.info(f'–ê–∫–∫–∞—É–Ω—Ç {session_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
                    await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            except (PhoneNumberBannedError, UserDeactivatedBanError, AuthKeyNotFound,
                    AuthKeyUnregisteredError, AuthKeyDuplicatedError) as e:
                await self.handle_banned_account(telegram_client, folder_name, session_name, e)
            except TimedOutError as error:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {error}")
                await asyncio.sleep(2)
            except sqlite3.OperationalError:
                await telegram_client.disconnect()
                working_with_accounts(f"user_data/accounts/{folder_name}/{session_name}.session",
                                      f"user_data/accounts/banned/{session_name}.session")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def handle_banned_account(telegram_client, folder_name, session_name, exception):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤.
        telegram_client.disconnect() - –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram.
        working_with_accounts() - –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É - account_folder. –ü—É—Ç—å –∫ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ,
        –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª - new_account_folder

        :param telegram_client: TelegramClient
        :param folder_name: –ü–∞–ø–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        :param session_name: –ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        :param exception: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        """
        logger.error(f"‚õî –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω: {session_name}. {str(exception)}")
        await telegram_client.disconnect()
        working_with_accounts(f"user_data/accounts/{folder_name}/{session_name}.session",
                              f"user_data/accounts/banned/{session_name}.session")

    async def check_for_spam(self, page: ft.Page, folder_name) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —Å–ø–∞–º —á–µ—Ä–µ–∑ @SpamBot

        :param folder_name: –ø–∞–ø–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            for session_name in find_filess(directory_path=f"user_data/accounts/{folder_name}",
                                            extension='session'):
                telegram_client = await self.get_telegram_client(page, session_name,
                                                                 account_directory=f"user_data/accounts/{folder_name}")
                try:
                    await telegram_client.send_message('SpamBot', '/start')  # –ù–∞—Ö–æ–¥–∏–º —Å–ø–∞–º –±–æ—Ç, –∏ –≤–≤–æ–¥–∏–º –∫–æ–º–∞–Ω–¥—É /start
                    for message in await telegram_client.get_messages('SpamBot'):
                        logger.info(f"{session_name} {message.message}")
                        similarity_ratio_ru: int = fuzz.ratio(f"{message.message}",
                                                              "–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í—ã —Å —ç—Ç–∏–º —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, "
                                                              "–∏–Ω–æ–≥–¥–∞ –Ω–∞—à–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-—Å–∏—Å—Ç–µ–º–∞ –∏–∑–ª–∏—à–Ω–µ —Å—É—Ä–æ–≤–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ "
                                                              "–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –í—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç "
                                                              "–æ–≥—Ä–∞–Ω–∏—á–µ–Ω –ø–æ –æ—à–∏–±–∫–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –Ω–∞—à–∏–º "
                                                              "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ "
                                                              "–ø–∏—Å–∞—Ç—å —Ç–µ–º, –∫—Ç–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª –í–∞—à –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, "
                                                              "–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã. "
                                                              "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –í–∞–º –ø–µ—Ä–≤—ã–º, –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å, "
                                                              "–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.")
                        if similarity_ratio_ru >= 97:
                            logger.info('‚õî –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}")
                            # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                            working_with_accounts(f"user_data/accounts/{folder_name}/{session_name}.session",
                                                  f"user_data/accounts/banned/{session_name}.session")
                        similarity_ratio_en: int = fuzz.ratio(f"{message.message}",
                                                              "I‚Äôm very sorry that you had to contact me. Unfortunately, "
                                                              "some account_actions can trigger a harsh response from our "
                                                              "anti-spam systems. If you think your account was limited by "
                                                              "mistake, you can submit a complaint to our moderators. While "
                                                              "the account is limited, you will not be able to send messages "
                                                              "to people who do not have your number in their phone contacts "
                                                              "or add them to groups and channels. Of course, when people "
                                                              "contact you first, you can always reply to them.")
                        if similarity_ratio_en >= 97:
                            logger.info('‚õî –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                            logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}")
                            # –ü–µ—Ä–µ–Ω–æ—Å Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ø–∞–ø–∫—É banned, –µ—Å–ª–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–Ω–µ
                            logger.info(session_name)
                            working_with_accounts(f"user_data/accounts/{folder_name}/{session_name}.session",
                                                  f"user_data/accounts/banned/{session_name}.session")
                        logger.error(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ SpamBot. {session_name}: {message.message}")

                        try:
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
                        except sqlite3.OperationalError as e:
                            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {session_name}")

                            await self.handle_banned_account(telegram_client, folder_name, session_name, e)

                except YouBlockedUserError:
                    continue  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ software_database.db –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                except (AttributeError, AuthKeyUnregisteredError) as e:
                    logger.error(e)
                    continue

        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def verify_all_accounts(self, page: ft.Page, folder_name) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã Telegram –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.

        :param folder_name: –ò–º—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram –∏–∑ –ø–∞–ø–∫–∏ üìÅ: {folder_name}")
            await checking_the_proxy_for_work()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            for session_file in find_filess(directory_path=f"user_data/accounts/{folder_name}",
                                            extension='session'):
                logger.info(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: user_data/accounts/{session_file}")
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                await self.verify_account(page=page, folder_name=folder_name, session_name=session_file)
            logger.info(f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram –∏–∑ –ø–∞–ø–∫–∏ üìÅ: {folder_name}")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def get_account_details(self, page: ft.Page, folder_name):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Telegram –∞–∫–∫–∞—É–Ω—Ç–µ.

        :param folder_name: –ò–º—è –∫–∞—Ç–∞–ª–æ–≥–∞
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram –∏–∑ –ø–∞–ø–∫–∏ üìÅ: {folder_name}")
            await checking_the_proxy_for_work()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ proxy
            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
            for session_name in find_filess(directory_path=f"user_data/accounts/{folder_name}",
                                            extension='session'):
                logger.info(f"‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç: user_data/accounts/{session_name}")
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                logger.info(
                    f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}. –ò—Å–ø–æ–ª—å–∑—É–µ–º API ID: {api_id}, API Hash: {api_hash}")

                telegram_client = await self.get_telegram_client(page, session_name,
                                                                 account_directory=f"user_data/accounts/{folder_name}")

                try:
                    me = await telegram_client.get_me()
                    phone = me.phone
                    await self.rename_session_file(telegram_client, session_name, phone, folder_name)

                except AttributeError:  # –ï—Å–ª–∏ –≤ get_me –ø—Ä–∏—Ö–æ–¥–∏—Ç NoneType (None)
                    pass

                except TypeNotFoundError:
                    await telegram_client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                    logger.error(
                        f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω: {session_name}.session. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º IP")
                    working_with_accounts(f"user_data/accounts/{folder_name}/{session_name}.session",
                                          f"user_data/accounts/banned/{session_name}.session")
                except AuthKeyUnregisteredError:
                    await telegram_client.disconnect()  # –†–∞–∑—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Telegram, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
                    logger.error(
                        f"‚õî –ë–∏—Ç—ã–π —Ñ–∞–π–ª –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–∞–Ω–µ–Ω: {session_name}.session. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º IP")
                    working_with_accounts(f"user_data/accounts/{folder_name}/{session_name}.session",
                                          f"user_data/accounts/banned/{session_name}.session")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def rename_session_file(telegram_client, phone_old, phone, folder_name) -> None:
        """
        –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç session —Ñ–∞–π–ª—ã.

        :param telegram_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
        :param phone_old: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        :param phone: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (–Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è session —Ñ–∞–π–ª–∞)
        :param folder_name: –ü–∞–ø–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        """
        await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è session —Ñ–∞–π–ª–∞
        try:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ session —Ñ–∞–π–ª–∞
            os.rename(f"user_data/accounts/{folder_name}/{phone_old}.session",
                      f"user_data/accounts/{folder_name}/{phone}.session", )
        except FileExistsError:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            os.remove(f"user_data/accounts/{folder_name}/{phone_old}.session")
        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

        getting_phone_number_data_by_phone_number(phone)  # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    async def get_telegram_client(self, page, session_name, account_directory):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∞–π–ª session.
        –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ file[0] - session —Ñ–∞–π–ª

        :param account_directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        :param session_name: –§–∞–π–ª —Å–µ—Å—Å–∏–∏ (file[0] - session —Ñ–∞–π–ª)
        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        :return TelegramClient: TelegramClient
        """
        logger.info(
            f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É: {account_directory}/{session_name}. –ò—Å–ø–æ–ª—å–∑—É–µ–º API ID: {api_id}, API Hash: {api_hash}")  # –ò–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ file[0] - session —Ñ–∞–π–ª
        telegram_client = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        try:
            telegram_client = TelegramClient(f"{account_directory}/{session_name}", api_id=api_id,
                                             api_hash=api_hash,
                                             system_version="4.16.30-vxCUSTOM",
                                             proxy=await reading_proxy_data_from_the_database(self.db_handler))

            await telegram_client.connect()
            return telegram_client

        except sqlite3.OperationalError:

            logger.info(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account_directory}/{session_name} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
            await show_notification(
                page,
                f"‚ö†Ô∏è –£ –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_directory}/{session_name}.\n\n"
                f"–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—à–∏–±–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üîÑ"
            )

        except sqlite3.DatabaseError:

            logger.info(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {session_name} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
            await show_notification(
                page,
                f"‚ö†Ô∏è –£ –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account_directory}/{session_name}.\n\n"
                f"–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—à–∏–±–æ–∫, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. üîÑ"
            )

        except AuthKeyDuplicatedError:
            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ session —Ñ–∞–π–ª–∞.
            logger.info(f"‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫–∫–∞—É–Ω—Ç {session_name} –∑–∞–ø—É—â–µ–Ω –ø–æ–¥ –¥—Ä—É–≥–∏–º ip")
            working_with_accounts(f"{account_directory}/{session_name}.session",
                                  f"user_data/accounts/banned/{session_name}.session")
        except AttributeError as error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        except ValueError:
            logger.info(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É {session_name}.")
        except Exception as error:
            await telegram_client.disconnect()
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    async def connecting_number_accounts(self, page: ft.Page):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å. –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è
        –∫–æ–¥.

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        try:
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram")

            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            header_text = ft.Text(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram", size=15, color="pink600")

            phone_number = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", multiline=False, max_lines=1)

            async def btn_click(e) -> None:
                phone_number_value = phone_number.value
                logger.info(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number_value}")

                # –î–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                proxy_settings = await reading_proxy_data_from_the_database(self.db_handler)  # Proxy IPV6 - –ù–ï –†–ê–ë–û–¢–ê–Æ–¢

                telegram_client = TelegramClient(f"{folder_accounts}/{phone_number_value}",
                                                 api_id=api_id,
                                                 api_hash=api_hash,
                                                 system_version="4.16.30-vxCUSTOM", proxy=proxy_settings)
                await telegram_client.connect()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram

                if not await telegram_client.is_user_authorized():
                    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                    await telegram_client.send_code_request(phone_number_value)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
                    await asyncio.sleep(2)

                    passww = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ telegram:", multiline=True, max_lines=1)

                    async def btn_click_code(e) -> None:
                        try:
                            logger.info(f"–ö–æ–¥ telegram: {passww.value}")
                            await telegram_client.sign_in(phone_number_value, passww.value)  # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º
                            telegram_client.disconnect()
                            page.go(
                                "/connecting_accounts_by_number")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ 2FA –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
                            page.update()
                        except SessionPasswordNeededError:  # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
                            logger.info("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.")
                            pass_2fa = ft.TextField(label="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å telegram:", multiline=False, max_lines=1)

                            async def btn_click_password(e) -> None:
                                logger.info(f"–ü–∞—Ä–æ–ª—å telegram: {pass_2fa.value}")
                                try:
                                    await telegram_client.sign_in(password=pass_2fa.value)
                                    logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                                    telegram_client.disconnect()
                                    page.go(
                                        "/connecting_accounts_by_number")  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                                    page.update()
                                except Exception as ex:
                                    logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {ex}")

                            page.views.append(ft.View(controls=[
                                pass_2fa,
                                await create_buttons(text="‚úÖ –ì–æ—Ç–æ–≤–æ", on_click=btn_click_password),
                            ]))
                            page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è

                        except ApiIdInvalidError:
                            logger.error("[!] –ù–µ–≤–µ—Ä–Ω—ã–µ API ID –∏–ª–∏ API Hash.")
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram
                        except Exception as error:
                            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {error}")
                            await telegram_client.disconnect()  # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Telegram

                    page.views.append(ft.View(controls=[passww,
                                                        await create_buttons(text="‚úÖ –ì–æ—Ç–æ–≤–æ", on_click=btn_click_code),
                                                        ]))
                    page.update()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞

                page.update()

            async def back_button_clicked(e):
                """
                –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                """
                page.go("/connecting_accounts_by_number")

            input_view = ft.View(
                controls=[header_text, phone_number,
                          await create_buttons(text="‚úÖ –ì–æ—Ç–æ–≤–æ", on_click=btn_click),
                          await create_buttons(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=back_button_clicked),
                          ])  # –°–æ–∑–¥–∞–µ–º –≤–∏–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫—É

            page.views.append(input_view)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.update()

        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")

    @staticmethod
    async def connecting_session_accounts(page: ft.Page):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Telegram

        :param page: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Flet –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ session –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram.")
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            header_text = ft.Text(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ Telegram.\n\n –í—ã–±–µ—Ä–∏—Ç–µ session —Ñ–∞–π–ª\n",
                                  size=15,
                                  # color="pink600"
                                  )

            # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            selected_files = ft.Text(value="Session —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", size=12)

            async def btn_click(e: ft.FilePickerResultEvent) -> None:
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞"""
                if e.files:
                    file_name = e.files[0].name  # –ò–º—è —Ñ–∞–π–ª–∞
                    file_path = e.files[0].path  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ ".session"
                    if file_name.endswith(".session"):
                        selected_files.value = f"–í—ã–±—Ä–∞–Ω session —Ñ–∞–π–ª: {file_name}"
                        selected_files.update()

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
                        target_folder = f"{folder_accounts}"
                        target_path = os.path.join(target_folder, file_name)

                        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        os.makedirs(target_folder, exist_ok=True)

                        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                        shutil.copy(file_path, target_path)
                        selected_files.value = f"–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤: {target_path}"
                    else:
                        selected_files.value = "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è session —Ñ–∞–π–ª–æ–º"
                else:
                    selected_files.value = "–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω"

                selected_files.update()
                page.update()

            async def back_button_clicked(e):
                """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
                page.go("/connecting_accounts_by_session")

            pick_files_dialog = ft.FilePicker(on_result=btn_click)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤

            page.overlay.append(pick_files_dialog)  # –î–æ–±–∞–≤–ª—è–µ–º FilePicker –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            input_view = ft.View(
                controls=[
                    header_text,
                    selected_files,  # –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    await create_buttons(text="–í—ã–±—Ä–∞—Ç—å session —Ñ–∞–π–ª",
                                         on_click=lambda _: pick_files_dialog.pick_files()),  # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                    await create_buttons(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", on_click=back_button_clicked),  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                ]
            )

            page.views.append(input_view)  # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∏–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page.update()

        except Exception as error:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞: {error}")
