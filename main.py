from loguru import logger
import flet as ft

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("user_data/log/log.log", rotation="1 MB", compression="zip")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
program_version = "0.0.7"
date_of_program_change = "12.01.2025"
program_name = "TelegramMaster_Commentator"
PADDING = 10
SPACING = 5
WINDOW_WIDTH = 900
WINDOW_HEIGHT = 600
BUTTON_WIDTH = 300
BUTTON_HEIGHT = 40
BUTTON_WIDTH_RadyAndBackButtons = 540
BUTTON_HEIGHT_RadyAndBackButtons = 35
PROGRAM_MENU_WIDTH = BUTTON_WIDTH + PADDING
RADIUS = 5
PRIMARY_COLOR = ft.colors.CYAN_600
SECONDARY_COLOR = ft.colors.BLACK
TITLE_FONT_SIZE = 13
TITLE_FONT_WEIGHT = ft.FontWeight.BOLD
LINE_WIDTH = 1
LINE_COLOR = ft.colors.GREY

async def actions_with_the_program_window(page: ft.Page):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    page.title = f"–í–µ—Ä—Å–∏—è {program_version}. –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è {date_of_program_change}"
    page.window.width = WINDOW_WIDTH
    page.window.height = WINDOW_HEIGHT
    page.window.resizable = False
    page.window.min_width = WINDOW_WIDTH
    page.window.max_width = WINDOW_WIDTH
    page.window.min_height = WINDOW_HEIGHT
    page.window.max_height = WINDOW_HEIGHT

class MainMenu:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""

    def __init__(self, page: ft.Page, info_list: ft.ListView):
        self.page = page
        self.info_list = info_list

    def create_title(self, text: str, font_size: int = TITLE_FONT_SIZE) -> ft.Text:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º."""
        return ft.Text(
            spans=[
                ft.TextSpan(
                    text,
                    ft.TextStyle(
                        size=font_size,
                        weight=TITLE_FONT_WEIGHT,
                        foreground=ft.Paint(
                            gradient=ft.PaintLinearGradient(
                                (0, 20), (150, 20), [PRIMARY_COLOR, PRIMARY_COLOR]
                            )), ), ), ], )

    def create_button(self, text: str, route: str) -> ft.OutlinedButton:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –º–µ–Ω—é."""
        return ft.OutlinedButton(
            text=text,
            on_click=lambda _: self.page.go(route),
            width=BUTTON_WIDTH,
            height=BUTTON_HEIGHT,
            style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=RADIUS)),
        )

    def build(self) -> ft.Column:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
        title = self.create_title(text=program_name, font_size=19)
        version = self.create_title(text=f"–í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program_version}", font_size=13)
        date_program_change = self.create_title(text=f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {date_of_program_change}", font_size=13)
        buttons = [
            self.create_button("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", "/getting_list_channels"),
            self.create_button("üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "/submitting_comments"),
            self.create_button("üñºÔ∏è –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏, –æ–ø–∏—Å–∞–Ω–∏—è, —Ñ–æ—Ç–æ", "/change_name_description_photo"),
            self.create_button("üîó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã", "/channel_subscription"),
            self.create_button("üìÇ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", "/creating_list_of_channels"),
            self.create_button("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "/documentation"),
        ]
        return ft.Column(
            [title, version, date_program_change, *buttons],
            alignment=ft.MainAxisAlignment.START,
            spacing=SPACING,
        )

class Application:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º."""

    def __init__(self):
        self.page = None
        self.info_list = None
        self.menu = None

    async def setup(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        self.page.theme_mode = ft.ThemeMode.LIGHT
        self.page.on_route_change = self.route_change

        await actions_with_the_program_window(self.page)

        self._add_startup_message()
        await self.route_change(None)

    def _add_startup_message(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView."""
        self.info_list.controls.append(
            ft.Text(
                "TelegramMaster Commentator üöÄ\n\nTelegramMaster Commentator - —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π "
                "—Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö Telegram, –∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏. üí¨\n\n"
                "üìÇ –ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub: https://github.com/pyadrus/TelegramMaster_Commentator \n"
                "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ Telegram: https://t.me/PyAdminRU\n"
                f"üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ: https://t.me/master_tg_d"
            )
        )

    async def route_change(self, route):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞."""
        self.page.views.clear()

        layout = ft.Row(
            [
                ft.Container(self.menu, width=PROGRAM_MENU_WIDTH, padding=PADDING),
                ft.Container(width=LINE_WIDTH, bgcolor=LINE_COLOR),
                ft.Container(self.info_list, expand=True, padding=PADDING),
            ],
            alignment=ft.MainAxisAlignment.START,
            spacing=0,
            expand=True,
        )

        self.page.views.append(ft.View("/", [layout]))

        route_handlers = {
            "/getting_list_channels": self._handle_getting_list_channels,
            "/submitting_comments": self._handle_submitting_comments,
            "/change_name_description_photo": self._handle_change_name_description_photo,
            "/channel_subscription": self._handle_channel_subscription,
            "/creating_list_of_channels": self._handle_creating_list_of_channels,
            "/documentation": self._handle_documentation,
            "/errors": self._handle_errors,
        }

        handler = route_handlers.get(self.page.route)
        if handler:
            await handler()

        self.page.update()

    async def _add_back_button(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        back_button = ft.ElevatedButton("–ù–∞–∑–∞–¥", on_click=lambda _: self.page.go("/"))
        self.info_list.controls.append(back_button)
        self.page.update()

    async def _handle_getting_list_channels(self):
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
        await self._add_back_button()

    async def _handle_submitting_comments(self):
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        await self._add_back_button()

    async def _handle_change_name_description_photo(self):
        logger.info("–°–º–µ–Ω–∞ –∏–º–µ–Ω–∏, –æ–ø–∏—Å–∞–Ω–∏—è, —Ñ–æ—Ç–æ")
        await self._add_back_button()

    async def _handle_channel_subscription(self):
        logger.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã")
        await self._add_back_button()

    async def _handle_creating_list_of_channels(self):
        logger.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
        await self._add_back_button()

    async def _handle_documentation(self):
        logger.info("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        await self._add_back_button()

    async def _handle_errors(self):
        logger.info("–û—à–∏–±–∫–∞")
        await self._add_back_button()

    async def main(self, page: ft.Page):
        """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        self.page = page
        self.info_list = ft.ListView(expand=True, spacing=10, padding=PADDING, auto_scroll=True)
        self.menu = MainMenu(page, self.info_list).build()
        await self.setup()

if __name__ == "__main__":
    ft.app(target=Application().main)