import flet as ft
from loguru import logger

from src.config_handler import program_version, program_last_modified_date, program_name
from src.core.handlers import (handle_getting_list_channels, handle_documentation,
                               handle_creating_list_of_channels, handle_channel_subscription,
                               handle_submitting_comments, handle_change_name_description_photo,
                               handle_connect_accounts, handle_settings)
from src.core.views import PRIMARY_COLOR, TITLE_FONT_WEIGHT
from src.logging_in import loging
from src.settings import SettingPage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("data/logs/app.log", rotation="500 KB", compression="zip", level="INFO")
logger.add("data/logs/errors.log", rotation="500 KB", compression="zip", level="ERROR")


class Application:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º."""

    def __init__(self):
        self.page = None
        self.info_list = None
        self.WINDOW_WIDTH = 900
        self.WINDOW_HEIGHT = 600
        self.SPACING = 5
        self.RADIUS = 5
        self.LINE_COLOR = ft.colors.GREY
        self.BUTTON_HEIGHT = 40
        self.LINE_WIDTH = 1
        self.PADDING = 10
        self.BUTTON_WIDTH = 300
        self.PROGRAM_MENU_WIDTH = self.BUTTON_WIDTH + self.PADDING

    async def actions_with_the_program_window(self, page: ft.Page):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
        page.title = f"–í–µ—Ä—Å–∏—è {program_version}. –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è {program_last_modified_date}"
        page.window.width = self.WINDOW_WIDTH
        page.window.height = self.WINDOW_HEIGHT
        page.window.resizable = False
        page.window.min_width = self.WINDOW_WIDTH
        page.window.max_width = self.WINDOW_WIDTH
        page.window.min_height = self.WINDOW_HEIGHT
        page.window.max_height = self.WINDOW_HEIGHT

    def create_title(self, text: str, font_size) -> ft.Text:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º."""
        return ft.Text(
            spans=[
                ft.TextSpan(
                    text,
                    ft.TextStyle(
                        size=font_size,
                        weight=TITLE_FONT_WEIGHT,
                        foreground=ft.Paint(
                            gradient=ft.PaintLinearGradient(
                                (0, 20), (150, 20), [PRIMARY_COLOR, PRIMARY_COLOR]
                            )), ), ), ], )

    def create_button(self, text: str, route: str) -> ft.OutlinedButton:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –º–µ–Ω—é."""
        return ft.OutlinedButton(
            text=text,
            on_click=lambda _: self.page.go(route),
            width=self.BUTTON_WIDTH,
            height=self.BUTTON_HEIGHT,
            style=ft.ButtonStyle(shape=ft.RoundedRectangleBorder(radius=self.RADIUS)),
        )

    def build_menu(self) -> ft.Column:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ª–æ–Ω–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
        title = self.create_title(text=program_name, font_size=19)
        version = self.create_title(text=f"–í–µ—Ä—Å–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {program_version}", font_size=13)
        date_program_change = self.create_title(text=f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {program_last_modified_date}", font_size=13)
        buttons = [
            self.create_button("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", "/getting_list_channels"),
            self.create_button("üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤", "/submitting_comments"),
            self.create_button("üñºÔ∏è –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏, –æ–ø–∏—Å–∞–Ω–∏—è, —Ñ–æ—Ç–æ", "/change_name_description_photo"),
            self.create_button("üîó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã", "/channel_subscription"),
            self.create_button("üìÇ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", "/creating_list_of_channels"),
            self.create_button("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "/documentation"),
            self.create_button("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤", "/connect_accounts"),
            self.create_button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "/settings"),
        ]
        return ft.Column(
            [title, version, date_program_change, *buttons],
            alignment=ft.MainAxisAlignment.START,
            spacing=self.SPACING,
        )

    async def setup(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
        self.page.theme_mode = ft.ThemeMode.LIGHT
        self.page.on_route_change = self.route_change
        await self.actions_with_the_program_window(self.page)
        self._add_startup_message()
        await self.route_change(None)

    def _add_startup_message(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ListView."""
        self.info_list.controls.append(
            ft.Text(
                "TelegramMaster Commentator üöÄ\n\nTelegramMaster Commentator - —ç—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π "
                "—Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∫–∞–Ω–∞–ª–∞—Ö Telegram, –∞ —Ç–∞–∫–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏. üí¨\n\n"
                "üìÇ –ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub: https://github.com/pyadrus/TelegramMaster_Commentator \n"
                "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ Telegram: https://t.me/PyAdminRU\n"
                f"üì° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ: https://t.me/master_tg_d"
            )
        )

    async def route_change(self, route):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞."""
        self.page.views.clear()
        layout = ft.Row(
            [
                ft.Container(self.build_menu(), width=self.PROGRAM_MENU_WIDTH, padding=self.PADDING),
                ft.Container(width=self.LINE_WIDTH, bgcolor=self.LINE_COLOR),
                ft.Container(self.info_list, expand=True, padding=self.PADDING),
            ],
            alignment=ft.MainAxisAlignment.START,
            spacing=0,
            expand=True,
        )
        self.page.views.append(ft.View("/", [layout]))
        route_handlers = {
            "/getting_list_channels": self._handle_getting_list_channels,
            "/submitting_comments": self._handle_submitting_comments,
            "/change_name_description_photo": self._handle_change_name_description_photo,
            "/channel_subscription": self._handle_channel_subscription,
            "/creating_list_of_channels": self._handle_creating_list_of_channels,
            "/documentation": self._handle_documentation,
            "/connect_accounts": self._handle_connect_accounts,
            "/settings": self._handle_settings,
            "/settings_proxy": self._handle_settings_proxy,
            "/record_id_hash": self._handle_record_id_hash,
            "/recording_message": self._recording_message,
            "/record_time": self._handle_record_time,
        }
        handler = route_handlers.get(self.page.route)
        if handler:
            await handler()
        self.page.update()

    async def _handle_record_time(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ó–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏"""
        limit_type = "time_config"
        label = "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –≤ —Ü–∏—Ñ—Ä–∞—Ö"  # –ü–æ–¥–ø–∏—Å—å –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        await SettingPage().record_setting(self.page, limit_type, label)

    async def _recording_message(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        unique_filename = "data/message/message"
        label = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª"
        await SettingPage().recording_text_for_sending_messages(self.page, label, unique_filename)

    async def _handle_record_id_hash(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ó–∞–ø–∏—Å—å id –∏ hash"""
        await SettingPage().writing_api_id_api_hash(self.page)

    async def _handle_settings_proxy(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏"""
        await SettingPage().creating_the_main_window_for_proxy_data_entry(self.page)

    async def _handle_connect_accounts(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        await handle_connect_accounts(self.page)

    async def _handle_settings(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        await handle_settings(self.page)

    async def _handle_getting_list_channels(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        await handle_getting_list_channels(self.page)

    async def _handle_submitting_comments(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        await handle_submitting_comments(self.page)

    async def _handle_change_name_description_photo(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ üñºÔ∏è –°–º–µ–Ω–∞ –∏–º–µ–Ω–∏, –æ–ø–∏—Å–∞–Ω–∏—è, —Ñ–æ—Ç–æ"""
        await handle_change_name_description_photo(self.page)

    async def _handle_channel_subscription(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ üîó –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        await handle_channel_subscription(self.page)

    async def _handle_creating_list_of_channels(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ üìÇ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        await handle_creating_list_of_channels(self.page)

    async def _handle_documentation(self):
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"""
        await handle_documentation(self.page)

    async def main(self, page: ft.Page):
        """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        self.page = page
        self.info_list = ft.ListView(expand=True, spacing=10, padding=self.PADDING, auto_scroll=True)

        await self.setup()
        await loging()


if __name__ == "__main__":
    ft.app(target=Application().main)
